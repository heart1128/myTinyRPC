// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_People.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fPeople_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_5fPeople_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h> 
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_5fPeople_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fPeople_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_5fPeople_2eproto;
namespace test {
class People;
struct PeopleDefaultTypeInternal;
extern PeopleDefaultTypeInternal _People_default_instance_;
class People_ProjectsEntry_DoNotUse;
struct People_ProjectsEntry_DoNotUseDefaultTypeInternal;
extern People_ProjectsEntry_DoNotUseDefaultTypeInternal _People_ProjectsEntry_DoNotUse_default_instance_;
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::People* Arena::CreateMaybeMessage<::test::People>(Arena*);
template<> ::test::People_ProjectsEntry_DoNotUse* Arena::CreateMaybeMessage<::test::People_ProjectsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {

enum People_Corpus : int {
  People_Corpus_UNIVERSAL = 0,
  People_Corpus_People_Corpus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  People_Corpus_People_Corpus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool People_Corpus_IsValid(int value);
constexpr People_Corpus People_Corpus_Corpus_MIN = People_Corpus_UNIVERSAL;
constexpr People_Corpus People_Corpus_Corpus_MAX = People_Corpus_UNIVERSAL;
constexpr int People_Corpus_Corpus_ARRAYSIZE = People_Corpus_Corpus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* People_Corpus_descriptor();
template<typename T>
inline const std::string& People_Corpus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, People_Corpus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function People_Corpus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    People_Corpus_descriptor(), enum_t_value);
}
inline bool People_Corpus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, People_Corpus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<People_Corpus>(
    People_Corpus_descriptor(), name, value);
}
// ===================================================================

class People_ProjectsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<People_ProjectsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<People_ProjectsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  People_ProjectsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR People_ProjectsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit People_ProjectsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const People_ProjectsEntry_DoNotUse& other);
  static const People_ProjectsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const People_ProjectsEntry_DoNotUse*>(&_People_ProjectsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "test.People.ProjectsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "test.People.ProjectsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_test_5fPeople_2eproto;
};

// -------------------------------------------------------------------

class People final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.People) */ {
 public:
  inline People() : People(nullptr) {}
  ~People() override;
  explicit PROTOBUF_CONSTEXPR People(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  People(const People& from);
  People(People&& from) noexcept
    : People() {
    *this = ::std::move(from);
  }

  inline People& operator=(const People& from) {
    CopyFrom(from);
    return *this;
  }
  inline People& operator=(People&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const People& default_instance() {
    return *internal_default_instance();
  }
  static inline const People* internal_default_instance() {
    return reinterpret_cast<const People*>(
               &_People_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(People& a, People& b) {
    a.Swap(&b);
  }
  inline void Swap(People* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(People* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  People* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<People>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const People& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const People& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(People* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.People";
  }
  protected:
  explicit People(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef People_Corpus Corpus;
  static constexpr Corpus UNIVERSAL =
    People_Corpus_UNIVERSAL;
  static inline bool Corpus_IsValid(int value) {
    return People_Corpus_IsValid(value);
  }
  static constexpr Corpus Corpus_MIN =
    People_Corpus_Corpus_MIN;
  static constexpr Corpus Corpus_MAX =
    People_Corpus_Corpus_MAX;
  static constexpr int Corpus_ARRAYSIZE =
    People_Corpus_Corpus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Corpus_descriptor() {
    return People_Corpus_descriptor();
  }
  template<typename T>
  static inline const std::string& Corpus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Corpus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Corpus_Name.");
    return People_Corpus_Name(enum_t_value);
  }
  static inline bool Corpus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Corpus* value) {
    return People_Corpus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 3,
    kProjectsFieldNumber = 23,
    kNameFieldNumber = 1,
    kAgeFieldNumber = 2,
  };
  // repeated string list = 3;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  const std::string& list(int index) const;
  std::string* mutable_list(int index);
  void set_list(int index, const std::string& value);
  void set_list(int index, std::string&& value);
  void set_list(int index, const char* value);
  void set_list(int index, const char* value, size_t size);
  std::string* add_list();
  void add_list(const std::string& value);
  void add_list(std::string&& value);
  void add_list(const char* value);
  void add_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_list();
  private:
  const std::string& _internal_list(int index) const;
  std::string* _internal_add_list();
  public:

  // map<string, string> projects = 23;
  int projects_size() const;
  private:
  int _internal_projects_size() const;
  public:
  void clear_projects();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_projects() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_projects();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      projects() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_projects();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 age = 2;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test.People)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> list_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      People_ProjectsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> projects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fPeople_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// People

// string name = 1;
inline void People::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& People::name() const {
  // @@protoc_insertion_point(field_get:test.People.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void People::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.People.name)
}
inline std::string* People::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:test.People.name)
  return _s;
}
inline const std::string& People::_internal_name() const {
  return name_.Get();
}
inline void People::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* People::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* People::release_name() {
  // @@protoc_insertion_point(field_release:test.People.name)
  return name_.Release();
}
inline void People::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.People.name)
}

// int32 age = 2;
inline void People::clear_age() {
  age_ = 0;
}
inline int32_t People::_internal_age() const {
  return age_;
}
inline int32_t People::age() const {
  // @@protoc_insertion_point(field_get:test.People.age)
  return _internal_age();
}
inline void People::_internal_set_age(int32_t value) {
  
  age_ = value;
}
inline void People::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:test.People.age)
}

// repeated string list = 3;
inline int People::_internal_list_size() const {
  return list_.size();
}
inline int People::list_size() const {
  return _internal_list_size();
}
inline void People::clear_list() {
  list_.Clear();
}
inline std::string* People::add_list() {
  std::string* _s = _internal_add_list();
  // @@protoc_insertion_point(field_add_mutable:test.People.list)
  return _s;
}
inline const std::string& People::_internal_list(int index) const {
  return list_.Get(index);
}
inline const std::string& People::list(int index) const {
  // @@protoc_insertion_point(field_get:test.People.list)
  return _internal_list(index);
}
inline std::string* People::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:test.People.list)
  return list_.Mutable(index);
}
inline void People::set_list(int index, const std::string& value) {
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test.People.list)
}
inline void People::set_list(int index, std::string&& value) {
  list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test.People.list)
}
inline void People::set_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test.People.list)
}
inline void People::set_list(int index, const char* value, size_t size) {
  list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test.People.list)
}
inline std::string* People::_internal_add_list() {
  return list_.Add();
}
inline void People::add_list(const std::string& value) {
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test.People.list)
}
inline void People::add_list(std::string&& value) {
  list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test.People.list)
}
inline void People::add_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test.People.list)
}
inline void People::add_list(const char* value, size_t size) {
  list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test.People.list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
People::list() const {
  // @@protoc_insertion_point(field_list:test.People.list)
  return list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
People::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:test.People.list)
  return &list_;
}

// map<string, string> projects = 23;
inline int People::_internal_projects_size() const {
  return projects_.size();
}
inline int People::projects_size() const {
  return _internal_projects_size();
}
inline void People::clear_projects() {
  projects_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
People::_internal_projects() const {
  return projects_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
People::projects() const {
  // @@protoc_insertion_point(field_map:test.People.projects)
  return _internal_projects();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
People::_internal_mutable_projects() {
  return projects_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
People::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_map:test.People.projects)
  return _internal_mutable_projects();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::test::People_Corpus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::People_Corpus>() {
  return ::test::People_Corpus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_5fPeople_2eproto
